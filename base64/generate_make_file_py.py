"""
Generates a python program source file that can be used to create a binary file from a base64 string.
"""
import base64
from pathlib import Path

program_template = \
"""# Generated by generate_make_file_py.py
# Make file '{name_file}' from binary data there (optionally) and return binary data
from base64 import b64decode


def make_binary_file(name: str = None):
    data = {data}
    if name:
        with open(name, 'wb') as f:
            f.write(b64decode(data))


if __name__ == '__main__':
    make_binary_file('{name_file}')
"""


def format_long_str(s):
    """
    Formats a long string so that it can be pasted into a python file.
    """
    DELIMETER = "' \\\n    b'"
    width = 100

    result_list = [s[i:i + width] for i in range(0, len(s), width)]
    return DELIMETER.join(result_list)


def generate_make_file(binary_file_name: str, python_file_name: str = None) -> str:

    assert Path(binary_file_name).exists(), f"File {binary_file_name} does not exist"

    python_file_name = python_file_name or f"make_{Path(binary_file_name).stem}_{Path(binary_file_name).suffix[1:]}.py"


    with open(binary_file_name, 'rb') as f:
        binary_data = f.read()
        b64_string = base64.b64encode(binary_data)
        data = format_long_str(str(b64_string))
        # data = format_long_str(str(base64.b64encode(f.read())))
        python_src = program_template.format(name_file=binary_file_name, data=data)

    with open(python_file_name, 'w') as f:
        f.write(python_src)

    return python_file_name


if __name__ == '__main__':
    # BINARY_FILE_NAME = 'data/small_probe.png'
    BINARY_FILE_NAME = 'data/get_background_color.png'

    generated_file = generate_make_file(BINARY_FILE_NAME)
    print(f"Abraham begat Isaac; and Isaac begat Jacob...\nLook at {generated_file}")
